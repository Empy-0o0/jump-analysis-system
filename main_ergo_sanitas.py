#!/usr/bin/env python3
"""
Sistema de An√°lisis Biomec√°nico de Saltos - Ergo SaniTas SpA
Medicina Deportiva - Evaluaci√≥n de Rendimiento Atl√©tico

Este sistema permite a los atletas autoevaluarse y determinar su nivel
entre principiante, intermedio y avanzado mediante an√°lisis biomec√°nico
en tiempo real de diferentes tipos de saltos.

Desarrollado para: Ergo SaniTas SpA - Chile
Versi√≥n: 2.0
"""

import cv2
import mediapipe as mp
import numpy as np
import json
import time
import logging
import os
from datetime import datetime

# Importar m√≥dulos del sistema
from user_profile import UsuarioPerfil
from jump_analyzer import AnalizadorSaltos, TipoSalto, EstadoSalto
from visual_interface import InterfazVisual

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s', 
    filename=f'ergo_sanitas_session_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
)

class SistemaErgoSaniTas:
    """
    Clase principal del Sistema de An√°lisis Biomec√°nico de Saltos
    para Ergo SaniTas SpA.
    
    Integra todos los m√≥dulos del sistema para proporcionar una experiencia
    completa de evaluaci√≥n biomec√°nica para atletas.
    """
    
    def __init__(self):
        self.perfil_usuario = None
        self.analizador_saltos = None
        self.interfaz_visual = InterfazVisual()
        
        # Estado del sistema
        self.calibrando = True
        self.calibracion_frames = 0
        self.max_calib_frames = 60
        self.mostrar_ayuda = False
        self.sesion_activa = False
        
        # MediaPipe setup
        self.mp_pose = mp.solutions.pose
        self.pose = self.mp_pose.Pose(
            min_detection_confidence=0.5, 
            min_tracking_confidence=0.5
        )
        
        # C√°mara
        self.cap = None
        
        logging.info("Sistema Ergo SaniTas inicializado")

    def mostrar_bienvenida(self):
        """Muestra la pantalla de bienvenida del sistema"""
        print("\n" + "="*70)
        print("   ERGO SANITAS SpA - SISTEMA DE AN√ÅLISIS BIOMEC√ÅNICO")
        print("="*70)
        print("   üè• MEDICINA DEPORTIVA - EVALUACI√ìN DE RENDIMIENTO ATL√âTICO")
        print("   üèÉ AN√ÅLISIS DE SALTOS EN TIEMPO REAL")
        print("   üìä CLASIFICACI√ìN AUTOM√ÅTICA DE NIVEL DEPORTIVO")
        print("="*70)
        print()
        print("CARACTER√çSTICAS DEL SISTEMA:")
        print("‚Ä¢ An√°lisis biomec√°nico en tiempo real")
        print("‚Ä¢ Detecci√≥n autom√°tica de errores t√©cnicos")
        print("‚Ä¢ Clasificaci√≥n en: Principiante, Intermedio, Avanzado")
        print("‚Ä¢ Recomendaciones personalizadas de entrenamiento")
        print("‚Ä¢ Tipos de salto: CMJ, SQJ, Abalakov")
        print("‚Ä¢ Reportes detallados de sesi√≥n")
        print()
        print("INSTRUCCIONES DE SEGURIDAD:")
        print("‚ö†Ô∏è  Realice saltos solo si est√° en condiciones f√≠sicas adecuadas")
        print("‚ö†Ô∏è  Detenga el ejercicio si siente molestias o dolor")
        print("‚ö†Ô∏è  Aseg√∫rese de tener espacio suficiente y superficie adecuada")
        print("‚ö†Ô∏è  Use ropa deportiva apropiada")
        print("="*70)
        
        input("\nüìã Presione ENTER para configurar su perfil de atleta...")

    def configurar_perfil_usuario(self):
        """Configura o carga el perfil del usuario"""
        print("\nüîç Buscando perfiles existentes...")
        
        # Intentar cargar perfil existente
        perfil_existente = UsuarioPerfil.cargar_perfil()
        
        if perfil_existente:
            print(f"‚úÖ Perfil encontrado: {perfil_existente.nombre}")
            print(f"   Edad: {perfil_existente.edad} a√±os")
            print(f"   Nivel: {perfil_existente.nivel_actividad.capitalize()}")
            
            usar_existente = input("\n¬øDesea usar este perfil? (s/n): ").strip().lower()
            if usar_existente in ['s', 'si', 'yes', 'y']:
                self.perfil_usuario = perfil_existente
                return
        
        # Crear nuevo perfil
        print("\nüìù Creando nuevo perfil de atleta...")
        self.perfil_usuario = UsuarioPerfil()
        self.perfil_usuario.obtener_datos_usuario()

    def inicializar_camara(self):
        """Inicializa la c√°mara del sistema"""
        print("\nüìπ Inicializando c√°mara...")
        
        self.cap = cv2.VideoCapture(0)
        
        if not self.cap.isOpened():
            print("‚ùå Error: No se pudo acceder a la c√°mara")
            print("   Verifique que:")
            print("   ‚Ä¢ La c√°mara est√© conectada correctamente")
            print("   ‚Ä¢ No est√© siendo usada por otra aplicaci√≥n")
            print("   ‚Ä¢ Tenga permisos de acceso a la c√°mara")
            return False
        
        # Configurar resoluci√≥n √≥ptima
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        
        print("‚úÖ C√°mara inicializada correctamente")
        return True

    def seleccionar_tipo_salto(self):
        """Permite al usuario seleccionar el tipo de salto a analizar"""
        print("\nüèÉ SELECCI√ìN DE TIPO DE SALTO")
        print("="*40)
        print("1. CMJ (Counter Movement Jump)")
        print("   ‚Ä¢ Salto con contramovimiento")
        print("   ‚Ä¢ M√°s com√∫n y natural")
        print("   ‚Ä¢ Eval√∫a potencia reactiva")
        print()
        print("2. SQJ (Squat Jump)")
        print("   ‚Ä¢ Salto desde posici√≥n est√°tica")
        print("   ‚Ä¢ Sin contramovimiento")
        print("   ‚Ä¢ Eval√∫a potencia conc√©ntrica pura")
        print()
        print("3. Abalakov")
        print("   ‚Ä¢ Salto con uso de brazos")
        print("   ‚Ä¢ M√°xima altura posible")
        print("   ‚Ä¢ Eval√∫a coordinaci√≥n total")
        print("="*40)
        
        while True:
            try:
                opcion = input("Seleccione el tipo de salto (1-3): ").strip()
                
                if opcion == "1":
                    self.analizador_saltos.set_tipo_salto(TipoSalto.CMJ)
                    print("‚úÖ Tipo de salto: CMJ seleccionado")
                    break
                elif opcion == "2":
                    self.analizador_saltos.set_tipo_salto(TipoSalto.SQJ)
                    print("‚úÖ Tipo de salto: SQJ seleccionado")
                    break
                elif opcion == "3":
                    self.analizador_saltos.set_tipo_salto(TipoSalto.ABALAKOV)
                    print("‚úÖ Tipo de salto: Abalakov seleccionado")
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Por favor, seleccione 1, 2 o 3.")
                    
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è Operaci√≥n cancelada por el usuario")
                return False
        
        return True

    def ejecutar_calibracion(self, frame, lm):
        """
        Ejecuta el proceso de calibraci√≥n del sistema
        
        Args:
            frame: Frame de video actual
            lm: Landmarks de MediaPipe
            
        Returns:
            bool: True si la calibraci√≥n est√° completa
        """
        if lm and self.analizador_saltos.calibrar(lm):
            self.calibracion_frames += 1
            progreso = (self.calibracion_frames / self.max_calib_frames) * 100
            
            # Dibujar pantalla de calibraci√≥n
            self.interfaz_visual.dibujar_pantalla_calibracion(
                frame, progreso, "Mantenga posici√≥n estable"
            )
            
            if self.calibracion_frames >= self.max_calib_frames:
                self.calibrando = False
                self.sesion_activa = True
                logging.info("Calibraci√≥n completada exitosamente")
                
                # Mostrar mensaje de √©xito
                self.interfaz_visual.dibujar_pantalla_calibracion(
                    frame, 100, "¬°Calibraci√≥n completa! Comenzando an√°lisis..."
                )
                cv2.imshow('Ergo SaniTas - An√°lisis Biomec√°nico', frame)
                cv2.waitKey(2000)  # Mostrar mensaje por 2 segundos
                
                return True
        else:
            # Error en calibraci√≥n
            self.interfaz_visual.dibujar_pantalla_calibracion(
                frame, 0, "Error: Aseg√∫rese de estar visible y quieto"
            )
            self.calibracion_frames = 0
        
        return False

    def procesar_frame_analisis(self, frame, lm):
        """
        Procesa un frame durante el an√°lisis activo
        
        Args:
            frame: Frame de video actual
            lm: Landmarks de MediaPipe
        """
        if not lm:
            # Sin detecci√≥n de pose
            self.interfaz_visual.dibujar_contenedor_moderno(
                frame, "AJUSTE SU POSICI√ìN", 50, 50, 600, 50, 
                InterfazVisual.COLORS['warning'], InterfazVisual.COLORS['text_primary']
            )
            cv2.putText(frame, "Aseg√∫rese de que todo su cuerpo sea visible", 
                       (100, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.6, 
                       InterfazVisual.COLORS['text_primary'], 1)
            return

        # Realizar an√°lisis biomec√°nico
        angle_rodilla, postura_ok, detalles_salto = self.analizador_saltos.verificar(lm)
        
        # Dibujar header corporativo
        self.interfaz_visual.dibujar_header_corporativo(
            frame, self.perfil_usuario.nombre, 
            f"Sesi√≥n: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        # Dibujar contadores principales
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Saltos: {self.analizador_saltos.contador}", 
            20, 100, 180, 40, InterfazVisual.COLORS['primary'], 
            InterfazVisual.COLORS['text_primary']
        )
        
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Correctos: {self.analizador_saltos.correctas}", 
            20, 150, 180, 40, InterfazVisual.COLORS['success'], 
            InterfazVisual.COLORS['text_primary']
        )
        
        precision = (self.analizador_saltos.correctas / max(self.analizador_saltos.contador, 1)) * 100
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Precisi√≥n: {precision:.1f}%", 
            20, 200, 180, 40, InterfazVisual.COLORS['info'], 
            InterfazVisual.COLORS['text_primary']
        )
        
        # Estado actual del salto
        estado_color = InterfazVisual.COLORS['secondary']
        if self.analizador_saltos.estado == EstadoSalto.CONTRAMOVIMIENTO:
            estado_color = InterfazVisual.COLORS['warning']
        elif self.analizador_saltos.estado == EstadoSalto.DESPEGUE:
            estado_color = InterfazVisual.COLORS['info']
        elif self.analizador_saltos.estado == EstadoSalto.VUELO:
            estado_color = InterfazVisual.COLORS['accent']
        elif self.analizador_saltos.estado == EstadoSalto.ATERRIZAJE:
            estado_color = InterfazVisual.COLORS['danger']
        
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Estado: {self.analizador_saltos.estado.value.replace('_', ' ')}", 
            20, 250, 180, 40, estado_color, InterfazVisual.COLORS['text_primary'], 0.6
        )
        
        # Altura del salto actual
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Altura: {self.analizador_saltos.jump_height_m*100:.1f}cm", 
            20, 300, 180, 40, InterfazVisual.COLORS['accent'], 
            InterfazVisual.COLORS['text_primary']
        )
        
        # Tipo de salto
        self.interfaz_visual.dibujar_contenedor_moderno(
            frame, f"Tipo: {self.analizador_saltos.tipo_salto.name}", 
            20, 350, 180, 40, InterfazVisual.COLORS['secondary'], 
            InterfazVisual.COLORS['text_primary'], 0.6
        )
        
        # Barra de potencia/explosividad
        h, w = frame.shape[:2]
        self.interfaz_visual.dibujar_barra_potencia_moderna(
            frame, self.analizador_saltos.potencia, w - 100, 100, 50, 250
        )
        
        # Monitor t√©cnico avanzado
        self.interfaz_visual.dibujar_monitor_tecnico_avanzado(
            frame, self.analizador_saltos.errores, w - 300, 100
        )
        
        # Panel de m√©tricas en tiempo real
        metricas_tiempo_real = {
            "√Ångulo Rodilla": f"{detalles_salto.get('angulo_rodilla', 0):.1f}¬∞",
            "√Ångulo Cadera": f"{detalles_salto.get('angulo_cadera', 0):.1f}¬∞",
            "Velocidad": f"{detalles_salto.get('velocidad_rodilla', 0):.2f}",
            "En Aire": "S√≠" if detalles_salto.get('is_in_air', False) else "No"
        }
        
        self.interfaz_visual.dibujar_panel_metricas(
            frame, metricas_tiempo_real, 20, 400, 200, 150
        )
        
        # Gr√°fico de altura mejorado
        self.interfaz_visual.dibujar_grafico_altura_mejorado(
            frame, self.analizador_saltos.historial_pos_y_cadera,
            self.analizador_saltos.initial_hip_y, self.analizador_saltos.px_to_m,
            self.analizador_saltos.jump_height_m, self.analizador_saltos.estado
        )
        
        # Gu√≠as visuales avanzadas
        self.interfaz_visual.dibujar_guias_visuales_avanzadas(
            frame, lm, self.analizador_saltos.estado, self.analizador_saltos
        )
        
        # Panel de ayuda (si est√° activado)
        if self.mostrar_ayuda:
            self.interfaz_visual.dibujar_panel_ayuda(frame)
        
        # Mostrar mensajes de feedback
        self._mostrar_mensajes_feedback(frame)

    def _mostrar_mensajes_feedback(self, frame):
        """Muestra los mensajes de feedback en pantalla"""
        h, w = frame.shape[:2]
        y_offset = h - 120
        
        # Mostrar √∫ltimos 3 mensajes
        mensajes_recientes = self.analizador_saltos.mensajes_feedback[-3:]
        
        for i, mensaje in enumerate(mensajes_recientes):
            if mensaje:
                self.interfaz_visual.dibujar_contenedor_moderno(
                    frame, mensaje, 20, y_offset + i * 35, 400, 30,
                    InterfazVisual.COLORS['background'], 
                    InterfazVisual.COLORS['text_primary'], 0.5
                )

    def manejar_teclas(self, key):
        """
        Maneja las teclas presionadas durante la ejecuci√≥n
        
        Args:
            key: C√≥digo de la tecla presionada
            
        Returns:
            bool: False si se debe salir del programa
        """
        if key == ord('q') or key == 27:  # 'q' o ESC
            return False
            
        elif key == ord('r'):  # Reiniciar sesi√≥n
            print("\nüîÑ Reiniciando sesi√≥n...")
            self.analizador_saltos.iniciar()
            self.calibrando = True
            self.calibracion_frames = 0
            self.sesion_activa = False
            logging.info("Sesi√≥n reiniciada por el usuario")
            
        elif key == ord('c'):  # Recalibrar
            print("\nüéØ Recalibrando sistema...")
            self.calibrando = True
            self.calibracion_frames = 0
            self.sesion_activa = False
            logging.info("Recalibraci√≥n iniciada por el usuario")
            
        elif key == ord('h'):  # Mostrar/ocultar ayuda
            self.mostrar_ayuda = not self.mostrar_ayuda
            
        elif key == ord('1'):  # Cambiar a CMJ
            self.analizador_saltos.set_tipo_salto(TipoSalto.CMJ)
            print("üèÉ Tipo de salto cambiado a CMJ")
            
        elif key == ord('2'):  # Cambiar a SQJ
            self.analizador_saltos.set_tipo_salto(TipoSalto.SQJ)
            print("üèÉ Tipo de salto cambiado a SQJ")
            
        elif key == ord('3'):  # Cambiar a Abalakov
            self.analizador_saltos.set_tipo_salto(TipoSalto.ABALAKOV)
            print("üèÉ Tipo de salto cambiado a Abalakov")
            
        elif key == ord('s'):  # Guardar sesi√≥n actual
            self._guardar_sesion_intermedia()
            
        return True

    def _guardar_sesion_intermedia(self):
        """Guarda el estado actual de la sesi√≥n"""
        try:
            resultados_parciales = self.analizador_saltos.finalizar()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sesion_intermedia_{self.perfil_usuario.nombre.replace(' ', '_')}_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(resultados_parciales, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ Sesi√≥n guardada: {filename}")
            logging.info(f"Sesi√≥n intermedia guardada: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error al guardar sesi√≥n: {e}")
            logging.error(f"Error al guardar sesi√≥n intermedia: {e}")

    def finalizar_sesion(self):
        """Finaliza la sesi√≥n y genera el reporte completo"""
        print("\nüìä Finalizando sesi√≥n y generando reporte...")
        
        # Obtener resultados finales
        resultados_finales = self.analizador_saltos.finalizar()
        
        # Mostrar resumen en consola
        self._mostrar_resumen_consola(resultados_finales)
        
        # Guardar resultados
        self._guardar_resultados_finales(resultados_finales)
        
        # Mostrar resumen visual
        self._mostrar_resumen_visual(resultados_finales)

    def _mostrar_resumen_consola(self, resultados):
        """Muestra el resumen de la sesi√≥n en consola"""
        print("\n" + "="*70)
        print("   RESUMEN FINAL DE LA SESI√ìN - ERGO SANITAS SpA")
        print("="*70)
        
        usuario = resultados.get('usuario', {})
        sesion = resultados.get('sesion', {})
        metricas = resultados.get('metricas', {})
        evaluacion = resultados.get('evaluacion', {})
        
        print(f"üë§ ATLETA: {usuario.get('nombre', 'N/A')}")
        print(f"   Edad: {usuario.get('edad', 0)} a√±os | Sexo: {usuario.get('sexo', 'N/A')}")
        print(f"   Peso: {usuario.get('peso_kg', 0)} kg | Altura: {usuario.get('altura_m', 0):.2f} m")
        print(f"   IMC: {usuario.get('imc', 0):.1f} | Nivel inicial: {usuario.get('nivel_inicial', 'N/A').capitalize()}")
        
        print(f"\nüìà RENDIMIENTO:")
        print(f"   Tipo de salto: {sesion.get('tipo_salto', 'N/A')}")
        print(f"   Duraci√≥n: {sesion.get('duracion', 'N/A')}")
        print(f"   Total de saltos: {sesion.get('total', 0)}")
        print(f"   Saltos correctos: {sesion.get('correctas', 0)}")
        print(f"   Precisi√≥n t√©cnica: {sesion.get('precision', 0):.1f}%")
        
        print(f"\nüéØ M√âTRICAS BIOMEC√ÅNICAS:")
        print(f"   Altura promedio: {metricas.get('altura_salto_promedio', 0)*100:.1f} cm")
        print(f"   Altura m√°xima: {metricas.get('altura_salto_maxima', 0)*100:.1f} cm")
        print(f"   Potencia promedio: {metricas.get('potencia_promedio', 0):.0f} W")
        print(f"   Tiempo de vuelo promedio: {metricas.get('tiempo_vuelo_promedio', 0):.3f} s")
        
        print(f"\nüèÜ EVALUACI√ìN FINAL:")
        print(f"   Clasificaci√≥n de rendimiento: {evaluacion.get('clasificacion_rendimiento', 'N/A')}")
        print(f"   Nivel del atleta: {evaluacion.get('nivel_usuario_final', 'N/A').upper()}")
        print(f"   Puntuaci√≥n t√©cnica: {evaluacion.get('puntuacion_tecnica', 0):.1f}/100")
        print(f"   Evaluaci√≥n cualitativa: {evaluacion.get('evaluacion_cualitativa', 'N/A')}")
        
        print(f"\n‚ùå ERRORES DETECTADOS:")
        errores = resultados.get('errores', {})
        errores_encontrados = False
        for error, count in errores.items():
            if count > 0:
                error_nombre = error.replace('_', ' ').title()
                print(f"   ‚Ä¢ {error_nombre}: {count} veces")
                errores_encontrados = True
        
        if not errores_encontrados:
            print("   ‚úÖ No se detectaron errores t√©cnicos significativos")
        
        print(f"\nüí° RECOMENDACIONES PERSONALIZADAS:")
        recomendaciones = resultados.get('recomendaciones', [])
        for i, rec in enumerate(recomendaciones, 1):
            print(f"   {i}. {rec}")
        
        print("="*70)

    def _guardar_resultados_finales(self, resultados):
        """Guarda los resultados finales en archivo JSON"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reporte_final_{self.perfil_usuario.nombre.replace(' ', '_')}_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(resultados, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ REPORTE GUARDADO: {filename}")
            logging.info(f"Reporte final guardado: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error al guardar reporte: {e}")
            logging.error(f"Error al guardar reporte final: {e}")

    def _mostrar_resumen_visual(self, resultados):
        """Muestra el resumen visual final"""
        # Crear frame en blanco para el resumen
        frame_resumen = np.zeros((720, 1280, 3), dtype=np.uint8)
        
        # Dibujar resumen de sesi√≥n
        self.interfaz_visual.dibujar_resumen_sesion(frame_resumen, resultados)
        
        # Mostrar resumen
        cv2.imshow('Ergo SaniTas - Resumen Final', frame_resumen)
        
        print("\nüìã Presione cualquier tecla para cerrar el resumen visual...")
        cv2.waitKey(0)
        cv2.destroyWindow('Ergo SaniTas - Resumen Final')

    def ejecutar(self):
        """M√©todo principal que ejecuta todo el sistema"""
        try:
            # 1. Mostrar bienvenida
            self.mostrar_bienvenida()
            
            # 2. Configurar perfil de usuario
            self.configurar_perfil_usuario()
            
            # 3. Inicializar analizador de saltos
            self.analizador_saltos = AnalizadorSaltos(self.perfil_usuario)
            self.analizador_saltos.iniciar()
            
            # 4. Inicializar c√°mara
            if not self.inicializar_camara():
                return
            
            # 5. Seleccionar tipo de salto
            if not self.seleccionar_tipo_salto():
                return
            
            print("\nüé• Iniciando an√°lisis en tiempo real...")
            print("   Controles disponibles:")
            print("   ‚Ä¢ Q: Salir")
            print("   ‚Ä¢ R: Reiniciar sesi√≥n")
            print("   ‚Ä¢ C: Recalibrar")
            print("   ‚Ä¢ H: Mostrar/ocultar ayuda")
            print("   ‚Ä¢ 1/2/3: Cambiar tipo de salto")
            print("   ‚Ä¢ S: Guardar sesi√≥n actual")
            
            # 6. Bucle principal de an√°lisis
            while self.cap.isOpened():
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå Error: No se pudo leer frame de la c√°mara")
                    break

                # Voltear frame horizontalmente para efecto espejo
                frame = cv2.flip(frame, 1)
                
                # Procesar con MediaPipe
                image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                results = self.pose.process(image_rgb)

                # Dibujar landmarks de pose
                lm = None
                if results.pose_landmarks:
                    mp.solutions.drawing_utils.draw_landmarks(
                        frame, results.pose_landmarks, self.mp_pose.POSE_CONNECTIONS,
                        mp.solutions.drawing_utils.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2),
                        mp.solutions.drawing_utils.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2)
                    )
                    lm = results.pose_landmarks.landmark

                # Procesar seg√∫n estado del sistema
                if self.calibrando:
                    self.ejecutar_calibracion(frame, lm)
                elif self.sesion_activa:
                    self.procesar_frame_analisis(frame, lm)

                # Mostrar frame
                cv2.imshow('Ergo SaniTas - An√°lisis Biomec√°nico', frame)

                # Manejar teclas
                key = cv2.waitKey(1) & 0xFF
                if not self.manejar_teclas(key):
                    break

            # 7. Finalizar sesi√≥n
            if self.analizador_saltos.contador > 0:
                self.finalizar_sesion()
            else:
                print("\n‚ö†Ô∏è No se realizaron saltos durante la sesi√≥n")

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Sesi√≥n interrumpida por el usuario")
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            logging.error(f"Error inesperado en ejecuci√≥n principal: {e}")
        finally:
            # Limpieza
            if self.cap:
                self.cap.release()
            cv2.destroyAllWindows()
            print("\nüëã ¬°Gracias por usar el Sistema Ergo SaniTas!")
            print("   Para m√°s informaci√≥n: www.ergosanitas.cl")

def main():
    """Funci√≥n principal del programa"""
    sistema = SistemaErgoSaniTas()
    sistema.ejecutar()

if __name__ == "__main__":
    main()
