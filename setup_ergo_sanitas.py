#!/usr/bin/env python3
"""
Script de Instalaci√≥n y Configuraci√≥n - Sistema Ergo SaniTas SpA
Automatiza la instalaci√≥n y configuraci√≥n inicial del sistema de an√°lisis biomec√°nico

Este script verifica dependencias, configura el entorno y prepara el sistema
para su primer uso en el entorno de Ergo SaniTas SpA.
"""

import os
import sys
import subprocess
import platform
import json
from datetime import datetime

class ErgoSaniTasSetup:
    """Clase para manejar la instalaci√≥n y configuraci√≥n del sistema"""
    
    def __init__(self):
        self.sistema_os = platform.system()
        self.python_version = sys.version_info
        self.directorio_base = os.getcwd()
        self.errores = []
        self.advertencias = []
        
    def mostrar_bienvenida(self):
        """Muestra la pantalla de bienvenida del instalador"""
        print("\n" + "="*70)
        print("   ERGO SANITAS SpA - INSTALADOR DEL SISTEMA")
        print("="*70)
        print("   üè• MEDICINA DEPORTIVA")
        print("   üîß CONFIGURACI√ìN AUTOM√ÅTICA DEL SISTEMA DE AN√ÅLISIS BIOMEC√ÅNICO")
        print("="*70)
        print(f"   Sistema Operativo: {self.sistema_os}")
        print(f"   Versi√≥n de Python: {self.python_version.major}.{self.python_version.minor}.{self.python_version.micro}")
        print(f"   Directorio de instalaci√≥n: {self.directorio_base}")
        print("="*70)
        
    def verificar_requisitos_sistema(self):
        """Verifica los requisitos m√≠nimos del sistema"""
        print("\nüîç VERIFICANDO REQUISITOS DEL SISTEMA...")
        
        # Verificar versi√≥n de Python
        if self.python_version < (3, 8):
            self.errores.append(f"Python 3.8+ requerido. Versi√≥n actual: {self.python_version.major}.{self.python_version.minor}")
        else:
            print(f"‚úÖ Python {self.python_version.major}.{self.python_version.minor}.{self.python_version.micro} - OK")
        
        # Verificar pip
        try:
            subprocess.run([sys.executable, "-m", "pip", "--version"], 
                         check=True, capture_output=True)
            print("‚úÖ pip - OK")
        except subprocess.CalledProcessError:
            self.errores.append("pip no est√° disponible")
        
        # Verificar espacio en disco (aproximado)
        try:
            import shutil
            espacio_libre = shutil.disk_usage(self.directorio_base).free / (1024**3)  # GB
            if espacio_libre < 2:
                self.advertencias.append(f"Espacio en disco bajo: {espacio_libre:.1f}GB disponibles")
            else:
                print(f"‚úÖ Espacio en disco: {espacio_libre:.1f}GB - OK")
        except Exception:
            self.advertencias.append("No se pudo verificar el espacio en disco")
        
        # Verificar c√°mara (b√°sico)
        try:
            import cv2
            cap = cv2.VideoCapture(0)
            if cap.isOpened():
                print("‚úÖ C√°mara detectada - OK")
                cap.release()
            else:
                self.advertencias.append("No se detect√≥ c√°mara web")
        except ImportError:
            print("‚ö†Ô∏è  OpenCV no instalado - se instalar√° con las dependencias")
        except Exception:
            self.advertencias.append("Error al verificar c√°mara")
    
    def instalar_dependencias(self):
        """Instala las dependencias del sistema"""
        print("\nüì¶ INSTALANDO DEPENDENCIAS...")
        
        if not os.path.exists("requirements.txt"):
            print("‚ùå Archivo requirements.txt no encontrado")
            self.errores.append("requirements.txt faltante")
            return False
        
        try:
            # Actualizar pip
            print("üîÑ Actualizando pip...")
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                         check=True, capture_output=True)
            
            # Instalar dependencias
            print("üîÑ Instalando dependencias del proyecto...")
            resultado = subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                                     check=True, capture_output=True, text=True)
            
            print("‚úÖ Dependencias instaladas correctamente")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando dependencias: {e}")
            if e.stdout:
                print(f"Salida: {e.stdout}")
            if e.stderr:
                print(f"Error: {e.stderr}")
            self.errores.append("Fallo en instalaci√≥n de dependencias")
            return False
    
    def verificar_instalacion(self):
        """Verifica que las dependencias se instalaron correctamente"""
        print("\nüß™ VERIFICANDO INSTALACI√ìN...")
        
        dependencias_criticas = [
            ("cv2", "OpenCV"),
            ("mediapipe", "MediaPipe"),
            ("numpy", "NumPy"),
            ("yaml", "PyYAML")
        ]
        
        for modulo, nombre in dependencias_criticas:
            try:
                __import__(modulo)
                print(f"‚úÖ {nombre} - OK")
            except ImportError:
                print(f"‚ùå {nombre} - FALLO")
                self.errores.append(f"{nombre} no se pudo importar")
    
    def crear_estructura_directorios(self):
        """Crea la estructura de directorios necesaria"""
        print("\nüìÅ CREANDO ESTRUCTURA DE DIRECTORIOS...")
        
        directorios = [
            "logs",
            "perfiles",
            "sesiones",
            "reportes",
            "templates",
            "config"
        ]
        
        for directorio in directorios:
            try:
                os.makedirs(directorio, exist_ok=True)
                print(f"‚úÖ Directorio '{directorio}' creado")
            except Exception as e:
                print(f"‚ùå Error creando directorio '{directorio}': {e}")
                self.advertencias.append(f"No se pudo crear directorio {directorio}")
    
    def configurar_archivos_iniciales(self):
        """Configura archivos de configuraci√≥n iniciales"""
        print("\n‚öôÔ∏è CONFIGURANDO ARCHIVOS INICIALES...")
        
        # Crear archivo de configuraci√≥n de logging
        config_logging = {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "standard": {
                    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
                }
            },
            "handlers": {
                "file": {
                    "level": "INFO",
                    "class": "logging.FileHandler",
                    "filename": "logs/ergo_sanitas.log",
                    "formatter": "standard"
                }
            },
            "loggers": {
                "": {
                    "handlers": ["file"],
                    "level": "INFO",
                    "propagate": False
                }
            }
        }
        
        try:
            with open("config/logging_config.json", "w", encoding="utf-8") as f:
                json.dump(config_logging, f, indent=2)
            print("‚úÖ Configuraci√≥n de logging creada")
        except Exception as e:
            print(f"‚ùå Error creando configuraci√≥n de logging: {e}")
            self.advertencias.append("No se pudo crear configuraci√≥n de logging")
        
        # Crear archivo de configuraci√≥n del sistema
        config_sistema = {
            "sistema": {
                "version": "2.0.0",
                "empresa": "Ergo SaniTas SpA",
                "fecha_instalacion": datetime.now().isoformat(),
                "directorio_base": self.directorio_base
            },
            "camara": {
                "indice_por_defecto": 0,
                "resolucion_ancho": 1280,
                "resolucion_alto": 720,
                "fps": 30
            },
            "analisis": {
                "frames_calibracion": 60,
                "umbral_confianza_deteccion": 0.5,
                "umbral_confianza_seguimiento": 0.5
            },
            "interfaz": {
                "mostrar_ayuda_inicial": True,
                "guardar_sesiones_automaticamente": True,
                "idioma": "es"
            }
        }
        
        try:
            with open("config/sistema_config.json", "w", encoding="utf-8") as f:
                json.dump(config_sistema, f, indent=2, ensure_ascii=False)
            print("‚úÖ Configuraci√≥n del sistema creada")
        except Exception as e:
            print(f"‚ùå Error creando configuraci√≥n del sistema: {e}")
            self.advertencias.append("No se pudo crear configuraci√≥n del sistema")
    
    def crear_scripts_utilidad(self):
        """Crea scripts de utilidad para el sistema"""
        print("\nüõ†Ô∏è CREANDO SCRIPTS DE UTILIDAD...")
        
        # Script de inicio r√°pido
        script_inicio = '''#!/usr/bin/env python3
"""
Script de Inicio R√°pido - Ergo SaniTas SpA
Inicia el sistema con configuraci√≥n por defecto
"""

import sys
import os

# Agregar directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from main_ergo_sanitas import main
    print("üöÄ Iniciando Sistema Ergo SaniTas...")
    main()
except ImportError as e:
    print(f"‚ùå Error de importaci√≥n: {e}")
    print("Verifique que todas las dependencias est√©n instaladas")
except Exception as e:
    print(f"‚ùå Error inesperado: {e}")
    input("Presione ENTER para salir...")
'''
        
        try:
            with open("inicio_rapido.py", "w", encoding="utf-8") as f:
                f.write(script_inicio)
            print("‚úÖ Script de inicio r√°pido creado")
        except Exception as e:
            print(f"‚ùå Error creando script de inicio: {e}")
            self.advertencias.append("No se pudo crear script de inicio")
        
        # Script de diagn√≥stico
        script_diagnostico = '''#!/usr/bin/env python3
"""
Script de Diagn√≥stico - Ergo SaniTas SpA
Verifica el estado del sistema y dependencias
"""

import sys
import cv2
import mediapipe as mp
import numpy as np

def diagnostico_completo():
    print("üîç DIAGN√ìSTICO DEL SISTEMA ERGO SANITAS")
    print("="*50)
    
    # Verificar OpenCV
    print(f"OpenCV versi√≥n: {cv2.__version__}")
    
    # Verificar MediaPipe
    print(f"MediaPipe versi√≥n: {mp.__version__}")
    
    # Verificar NumPy
    print(f"NumPy versi√≥n: {np.__version__}")
    
    # Probar c√°mara
    print("\\nProbando c√°mara...")
    cap = cv2.VideoCapture(0)
    if cap.isOpened():
        ret, frame = cap.read()
        if ret:
            print(f"‚úÖ C√°mara OK - Resoluci√≥n: {frame.shape[1]}x{frame.shape[0]}")
        else:
            print("‚ùå No se pudo capturar frame")
        cap.release()
    else:
        print("‚ùå No se pudo abrir c√°mara")
    
    # Probar MediaPipe Pose
    print("\\nProbando MediaPipe Pose...")
    try:
        pose = mp.solutions.pose.Pose()
        print("‚úÖ MediaPipe Pose inicializado correctamente")
        pose.close()
    except Exception as e:
        print(f"‚ùå Error con MediaPipe Pose: {e}")
    
    print("\\n‚úÖ Diagn√≥stico completado")

if __name__ == "__main__":
    diagnostico_completo()
'''
        
        try:
            with open("diagnostico.py", "w", encoding="utf-8") as f:
                f.write(script_diagnostico)
            print("‚úÖ Script de diagn√≥stico creado")
        except Exception as e:
            print(f"‚ùå Error creando script de diagn√≥stico: {e}")
            self.advertencias.append("No se pudo crear script de diagn√≥stico")
    
    def mostrar_resumen_instalacion(self):
        """Muestra el resumen final de la instalaci√≥n"""
        print("\n" + "="*70)
        print("   RESUMEN DE INSTALACI√ìN")
        print("="*70)
        
        if not self.errores:
            print("üéâ ¬°INSTALACI√ìN COMPLETADA EXITOSAMENTE!")
            print("\n‚úÖ El sistema est√° listo para usar")
            print("\nüöÄ PARA INICIAR EL SISTEMA:")
            print("   python main_ergo_sanitas.py")
            print("\nüîß SCRIPTS DISPONIBLES:")
            print("   ‚Ä¢ python inicio_rapido.py - Inicio r√°pido")
            print("   ‚Ä¢ python diagnostico.py - Diagn√≥stico del sistema")
            print("   ‚Ä¢ python demo_web.py - Demostraci√≥n web")
            
        else:
            print("‚ùå INSTALACI√ìN COMPLETADA CON ERRORES")
            print("\nüî¥ ERRORES ENCONTRADOS:")
            for error in self.errores:
                print(f"   ‚Ä¢ {error}")
        
        if self.advertencias:
            print("\n‚ö†Ô∏è ADVERTENCIAS:")
            for advertencia in self.advertencias:
                print(f"   ‚Ä¢ {advertencia}")
        
        print("\nüìû SOPORTE T√âCNICO:")
        print("   Email: tech@ergosanitas.cl")
        print("   Web: www.ergosanitas.cl")
        print("="*70)
    
    def ejecutar_instalacion(self):
        """Ejecuta el proceso completo de instalaci√≥n"""
        try:
            self.mostrar_bienvenida()
            
            # Verificar requisitos
            self.verificar_requisitos_sistema()
            
            if self.errores:
                print("\n‚ùå No se puede continuar debido a errores cr√≠ticos")
                self.mostrar_resumen_instalacion()
                return False
            
            # Confirmar instalaci√≥n
            respuesta = input("\n¬øDesea continuar con la instalaci√≥n? (s/n): ").strip().lower()
            if respuesta not in ['s', 'si', 'yes', 'y']:
                print("‚ö†Ô∏è Instalaci√≥n cancelada por el usuario")
                return False
            
            # Proceso de instalaci√≥n
            if not self.instalar_dependencias():
                print("‚ùå Fallo en la instalaci√≥n de dependencias")
                self.mostrar_resumen_instalacion()
                return False
            
            self.verificar_instalacion()
            self.crear_estructura_directorios()
            self.configurar_archivos_iniciales()
            self.crear_scripts_utilidad()
            
            # Resumen final
            self.mostrar_resumen_instalacion()
            
            return len(self.errores) == 0
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Instalaci√≥n interrumpida por el usuario")
            return False
        except Exception as e:
            print(f"\n‚ùå Error inesperado durante la instalaci√≥n: {e}")
            return False

def main():
    """Funci√≥n principal del instalador"""
    instalador = ErgoSaniTasSetup()
    exito = instalador.ejecutar_instalacion()
    
    if exito:
        print("\nüéØ ¬°Sistema listo para evaluar atletas!")
        input("\nPresione ENTER para salir...")
    else:
        print("\nüí° Consulte la documentaci√≥n o contacte soporte t√©cnico")
        input("\nPresione ENTER para salir...")

if __name__ == "__main__":
    main()
